<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Nikhil/OneDrive/Desktop/prox49/walmart_sales_data.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1940"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="0" parent="0"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="sales" custom_title="0" dock_id="1" table="4,5:mainsales"/><dock_state state="000000ff00000000fd00000001000000020000039100000260fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000003910000013300ffffff000002690000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="sales" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="95"/><column index="2" value="47"/><column index="3" value="79"/><column index="4" value="92"/><column index="5" value="55"/><column index="6" value="183"/><column index="7" value="62"/><column index="8" value="57"/><column index="9" value="63"/><column index="10" value="71"/><column index="11" value="87"/><column index="12" value="71"/><column index="13" value="95"/><column index="14" value="55"/><column index="15" value="150"/><column index="16" value="83"/><column index="17" value="45"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- querying all rows and columns 
select * from sales </sql><sql name="SQL 2">--How many total sales records are there?
SELECT COUNT(*) AS total_records FROM sales;
</sql><sql name="SQL 3">-- What are the different product lines sold

select DISTINCT Product_line from sales

</sql><sql name="SQL 4">-- What is the total quantity sold by each branch?
SELECT Branch, SUM(Quantity) AS total_quantity
FROM sales
GROUP BY Branch;
</sql><sql name="SQL 5">--Which city had the highest gross income?
SELECT City, SUM(gross_income) AS total_gross_income
FROM sales
GROUP BY City
ORDER BY total_gross_income DESC
LIMIT 1;</sql><sql name="SQL 6"> --How many sales were made by male vs female customers?
SELECT Gender, COUNT(*) AS total_sales
FROM sales
GROUP BY Gender;
</sql><sql name="SQL 7">-- Monthly gross income trend per branch
WITH monthly_income AS (
    SELECT 
        Branch,
        strftime('%m', Date) AS month,
        SUM([gross_income]) AS monthly_income
    FROM sales
    GROUP BY Branch, month
)
SELECT * FROM monthly_income
ORDER BY Branch, month;

</sql><sql name="SQL 8">-- Get branches with above-average total sales
WITH branch_sales AS (
    SELECT Branch, SUM(Total) AS total_sales
    FROM sales
    GROUP BY Branch
),
avg_sales AS (
    SELECT AVG(total_sales) AS avg_branch_sales FROM branch_sales
)
SELECT bs.*
FROM branch_sales bs, avg_sales
WHERE bs.total_sales &gt; avg_sales.avg_branch_sales;</sql><sql name="SQL 9">-- Find the date with the highest total sales.
SELECT Date, SUM(Total) AS daily_sales
FROM sales
GROUP BY Date
ORDER BY daily_sales DESC

</sql><sql name="SQL 10">--What is the average unit price per product line?
SELECT Product_line, AVG(Unit_price) AS avg_unit_price
FROM sales
GROUP BY Product_line;</sql><sql name="SQL 11">--What are the top 3 product lines by gross income?
SELECT Product_line, SUM(gross_income) AS total_income
FROM sales
GROUP BY Product_line
ORDER BY total_income DESC
LIMIT 5</sql><sql name="SQL 12">-- Calculate average quantity and filter transactions above that average
WITH avg_qty AS (
    SELECT AVG(Quantity) AS avg_quantity FROM sales
)
SELECT *
FROM sales, avg_qty
WHERE sales.Quantity &gt; avg_qty.avg_quantity;
</sql><sql name="SQL 13">--What is the total Tax 5% collected per branch?
SELECT Branch, SUM(&quot;Tax 5%&quot;) AS total_tax_collected
FROM sales
GROUP BY Branch;</sql><sql name="SQL 14">-- Find the top 3 product lines by average rating in each city
WITH avg_rating_cte AS (
    SELECT 
        City,
        Product_line,
        AVG(Rating) AS avg_rating,
        RANK() OVER (PARTITION BY city ORDER BY AVG(Rating) DESC) AS rank_in_city
    FROM sales
    GROUP BY City, [Product_line]
)
SELECT * 
FROM avg_rating_cte
WHERE rank_in_city &lt;= 3;



</sql><sql name="SQL 15">--Rank branches by average customer rating
SELECT Branch,
       AVG(Rating) AS avg_rating,
       DENSE_RANK() OVER (ORDER BY AVG(Rating) DESC) AS branch_rank
FROM sales
GROUP BY Branch;

</sql><sql name="SQL 16">--Rank each customerâ€™s purchases within their city by total amount spent
SELECT Invoice_ID,
       Customer_type,
       City,
       Total,
       RANK() OVER (PARTITION BY City, Customer_type ORDER BY Total DESC) AS purchase_rank
FROM sales;
</sql><sql name="SQL 17">--Add a cumulative total sales column per branch (running total)
SELECT Invoice_ID,
       Branch,
       Date,
       Total,
       SUM(Total) OVER (PARTITION BY Branch ORDER BY Date) AS running_total
FROM sales;

</sql><sql name="SQL 18">--Find top 3 highest rated transactions per branch
SELECT *
FROM (
    SELECT *,
           RANK() OVER (PARTITION BY Branch ORDER BY Rating DESC) AS rating_rank
    FROM sales
) sub
WHERE rating_rank &lt;= 3;</sql><sql name="SQL 19">--Find the top-selling product line by total quantity sold.
SELECT Product_line, SUM(Quantity) AS total_quantity
FROM sales
GROUP BY Product_line
ORDER BY total_quantity DESC
LIMIT 5
</sql><sql name="SQL 20">--Rank product lines by total gross income (across all branches)
SELECT Product_line,
       SUM(gross_income) AS total_income,
       RANK() OVER (ORDER BY SUM(gross_income) DESC) AS income_rank
FROM sales
GROUP BY Product_line;

</sql><sql name="SQL 21"></sql><current_tab id="0"/></tab_sql></sqlb_project>
